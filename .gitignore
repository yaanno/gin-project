# Binaries for the project (executable files)
[project_name]
[project_name].exe
*.exe
*.bin

# Dependency management (vendor directory - adjust if you commit vendor)
vendor/

# Go build output (compiled packages and test binaries)
*.o
_obj
_test
*.test
*.out
*.test.exe

# IDE specific files - adjust for your IDE/Editors
.idea/
.vscode/
*.iml
*.swp
*.swo
*.session
*.DS_Store # macOS folder settings

# Test coverage files
coverage.out
coverage.txt
*.prof

# Operating System temp files
*.tmp
*.temp

# Documentation and generated files (if you generate documentation)
# docs/
*.html

# Log files (if applicable to your project)
*.log

# Sensitive files (example - adjust for your project and NEVER commit sensitive data!)
*.env
*.config
secrets.yaml
config.yaml

# SQLite data
data/

# Go module related files (generally you want to keep go.mod and go.sum)
# However, if you have generated module related data that should be ignored, add here
# For most cases, these are not needed in .gitignore

# Custom files/directories specific to your project
# Add any project specific files or directories you want to ignore below this line
# Example:
# build/
# dist/
# tmp/


# --- Explanation of sections ---

# Binaries:
#   Ignores the compiled executable files. Replace '[project_name]' with your actual project name.
#   Includes common binary extensions like .exe and .bin.

# Dependency management:
#   vendor/:  Ignores the vendor directory.  This is common practice when using Go modules.
#             If you commit your vendor directory, REMOVE this line.

# Go build output:
#   Ignores files generated by the Go build process, including object files, test binaries, etc.

# IDE specific files:
#   Ignores common files and directories created by popular IDEs and editors like IntelliJ IDEA (GoLand),
#   VS Code, and general editor temporary files.  Adjust this section based on your team's IDE usage.

# Test coverage files:
#   Ignores files generated by Go's test coverage tools.

# Operating System temp files:
#   Ignores generic temporary files created by operating systems.

# Documentation and generated files:
#   If your project generates documentation (e.g., HTML), you can ignore the output directory.

# Log files:
#   If your application generates log files, add a pattern to ignore them.

# Sensitive files:
#   **CRITICAL:**  This section is for files that might contain sensitive information like API keys,
#   database passwords, or configuration details. **NEVER commit sensitive data to your repository.**
#   Customize this section to include any files that should NOT be tracked in your Git repository.

#